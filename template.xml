<templateSet group="lukesReactToolBox">
    <template name="rtfc" value="import {FC} from &quot;react&quot;;&#10;&#10;interface $ComponentName$Props {&#10;  prop: string;&#10;}&#10;&#10;export const $ComponentName$: FC&lt;$ComponentName$Props&gt; = (props) =&gt; {&#10;  const { prop } = props;&#10;&#10;  return (&#10;    &lt;div className={``}&gt;&#10;      &#10;    &lt;/div&gt;&#10;  );&#10;};" description="Typed React Functional Component with Tailwind div" toReformat="false" toShortenFQNames="true">
        <variable name="ComponentName" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="usee" value="useEffect(() =&gt; {&#10;&#10;},[])" description="Use Effect - on mount - no deps" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="af" value="const handleSomething = () =&gt; {&#10;    &#10;};" description="Arrow Function" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="uses" value="const [state, setState] = useState(null)" description="useState with null value" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twdiv" value="&lt;div className={`flex`}&gt;&#10;&#10;&lt;/div&gt;" description="Div with Tailwind Flex" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="rtern" value="{value ? (&#10;  &lt;div className={``}&gt;&lt;/div&gt;&#10;) : (&#10;  &lt;div className={``}&gt;&lt;/div&gt;&#10;)}" description="Creates a styled Ternary operation for &lt;div&gt; rendering" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="rand" value="{value &amp;&amp; (&lt;div className={``}&gt;&lt;/div&gt;)}" description="Creates a styled AND operation for &lt;div&gt; rendering" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twtern" value="${value ? &quot;&quot; : &quot;&quot;}" description="Creates an Inline Ternary for class styling based on value" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="HTML" value="true" />
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twor" value="${value || &quot;&quot;}" description="Creates an inline OR operation for class styling based on a nullable values" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="HTML" value="true" />
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twand" value="${value &amp;&amp; &quot;&quot;}" description="Creates an inline AND operation for class styling based on a value" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="HTML" value="true" />
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twrow" value="&lt;div className={`flex flex-row gap-4`}&gt;&#10;&#10;&lt;/div&gt;" description="Creates a Tailwind row" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="twcol" value="&lt;div className={`flex flex-col gap-4`}&gt;&#10;&#10;&lt;/div&gt;" description="Creates  a Tailwind column" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="rfc" value="export default function $ComponentName$() {&#10;  return (&#10;    &lt;div className={``}&gt;&#10;&#10;    &lt;/div&gt;&#10;  );&#10;};" description="Creates a simple Functional Component" toReformat="false" toShortenFQNames="true">
        <variable name="ComponentName" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwtfc" value="import {FunctionComponent} from &quot;react&quot;;&#10;import {View, Text, ViewStyle} from &quot;react-native&quot;;&#10;&#10;interface OwnProps {&#10;  style: ViewStyle;&#10;}&#10;&#10;type Props = OwnProps;&#10;&#10;export const $ComponentName$: FunctionComponent&lt;Props&gt; = (props) =&gt; {&#10;  const {style} = props&#10;&#10;  return (&#10;    &lt;View style={style} className={``}&gt;&#10;&#10;    &lt;/View&gt;&#10;  );&#10;};" description="Creates a NativeWind Type Functional Component" toReformat="false" toShortenFQNames="true">
        <variable name="ComponentName" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwfc" value="import {View, Text} from &quot;react-native&quot;;&#10;&#10;export default function $ComponentName$() {&#10;&#9;return (&#10;&#9;&#9;&lt;View className={``}&gt;&#10;&#10;&#9;&#9;&lt;/View&gt;&#10;&#9;);&#10;};" description="Creates  a simple NativeWind Functional Component" toReformat="false" toShortenFQNames="true">
        <variable name="ComponentName" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwview" value="&lt;View className={``}&gt;&#10;&#10;&lt;/View&gt;" description="Creates a NativeWind View with className" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwtext" value="&lt;Text className={``}&gt;&#10;&#10;&lt;/Text&gt;" description="Creates a NativeWind Text with className" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwtern" value="{value ? (&#10;  &lt;View className={``}&gt;&lt;/View&gt;&#10;) : (&#10;  &lt;View className={``}&gt;&lt;/View&gt;&#10;)}" description="Creates a NativeWind Ternary Opration for &lt;View&gt;" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
    <template name="nwand" value="{value &amp;&amp; (&lt;View className={``}&gt;&lt;/View&gt;)}" description="Creates a NativeWind AND Operation for &lt;View&gt;" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="JAVA_SCRIPT" value="true" />
        </context>
    </template>
</templateSet>